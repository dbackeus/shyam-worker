#!/usr/bin/env ruby

################################################################################

require "bundler"
Bundler.setup

require "aws-sdk-sqs"

require_relative "../lib/handlers"

################################################################################

%w[INT TERM].each do |signal|
  trap(signal) do
    puts ""
    puts "#{signal} signal received, shutting down!"
    @shutdown = true
  end
end

$stdout.sync = true # allow puts to work for heroku logging

sqs = Aws::SQS::Client.new
poller = Aws::SQS::QueuePoller.new(ENV.fetch("QUEUE_URL"), client: sqs)

poller.before_request do |stats|
  throw :stop_polling if @shutdown
end

puts "Polling #{ENV.fetch("QUEUE_URL")} for messages..."

poller.poll(skip_delete: true, wait_time_seconds: 5) do |msg|
  body = JSON.parse(msg.body)
  message = JSON.parse(body["Message"])

  puts "Handling message:", message

  begin
    class_name = message.fetch("type").underscore.classify + "Handler"
    handler = class_name.constantize.new(message)
    handler.perform
  rescue Handler::SkipMessageError => e
    puts "Skipped message becase: #{e.message}"
  rescue NameError => e
    if e.message == "uninitialized constant #{class_name}"
      puts "[WARNING]: no handler found for #{message.fetch('type')} infered to #{class_name}"
      next
    else
      raise
    end
  rescue => e
    puts "[ERROR]", e, e.backtrace
    next # keep polling without deleting message
  end

  puts "Message handled, deleting..."
  poller.delete_message(msg)
end
